install.packages('rsconnect')
install.packages("rsconnect")
rsconnect::setAccountInfo(name='brandon-yeoph', token='49C69488742C4A1F298550C25E2800BA', secret='vL9OSxT+JIUC6luAP8d/A7RbU5sCVHCh1ybjx+Bl')
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(Rtsne)
tsnedata <- Rtsne(iris)
tsnedata <- Rtsne(iris,check_duplicates = FALSE)
View(tsnedata)
plotdata <- tsnedata$Y
View(plotdata)
knitr::opts_chunk$set(echo = TRUE)
library(shiny)
library(shinythemes)
library(ggplot2)
library(ggpubr)
library(pheatmap)
iris <- iris
#Based on https://towardsdatascience.com/build-your-first-shiny-web-app-in-r-72f9538f9868
ui <- fluidPage(theme = shinytheme("cerulean"),
navbarPage(
"Shinny Page",
tabPanel("Main Tab",
sidebarPanel("This is the side"),
mainPanel("This is the Main")
),
tabPanel("Tab2","In Progress")
)
)
ui <- fluidPage(theme = shinytheme("cerulean"),
navbarPage(
"Shinny Page",
tabPanel("Main Tab",
sidebarPanel(
selectInput(
inputId = "SelectPlot",
label = "TypeofPlot",
choices = c("Scatter","Jitter","Line"),
selected = "Scatter"
),
sliderInput(
inputId="Shape",
label="Shape of Plot",
min=1,
max=20,
step=1,
value=1
),
),
mainPanel(
h1("Output"),
h4("Plot"),
plotOutput("distPlot"),
),
),
tabPanel("Tab2","In Progress"),
tabPanel("Tab3","In Progress")
)
)
server <- function(input, output) {
output$distPlot <- renderPlot({
if(input$SelectPlot =="Jitter"){
a <- ggplot(iris,aes(x=Sepal.Length,y=Sepal.Width)) + geom_jitter(shape=input$Shape)
}
if(input$SelectPlot =="Scatter"){
a <- ggplot(iris,aes(x=Sepal.Length,y=Sepal.Width)) + geom_point(shape=input$Shape)
}
if(input$SelectPlot =="Line"){
a <- ggplot(iris,aes(x=Sepal.Length,y=Sepal.Width)) + geom_line(col=input$Shape)
}
a
})#output$dist
}#Server
shinyApp(ui = ui, server = server)
library(shiny)
library(shinythemes)
library(ggplot2)
library(ggpubr)
library(pheatmap)
iris <- iris
#Based on https://towardsdatascience.com/build-your-first-shiny-web-app-in-r-72f9538f9868
ui <- fluidPage(theme = shinytheme("cerulean"),
navbarPage(
"Shinny Page",
tabPanel("Main Tab",
sidebarPanel("This is the side"),
mainPanel("This is the Main")
),
tabPanel("Tab2","In Progress")
)
)
ui <- fluidPage(theme = shinytheme("cerulean"),
navbarPage(
"Shinny Page",
tabPanel("Main Tab",
sidebarPanel(
selectInput(
inputId = "SelectPlot",
label = "TypeofPlot",
choices = c("Scatter","Jitter","Line"),
selected = "Scatter"
),
sliderInput(
inputId="Shape",
label="Shape of Plot",
min=1,
max=20,
step=1,
value=1
),
),
mainPanel(
h1("Output"),
h4("Plot"),
plotOutput("distPlot"),
),
),
tabPanel("Tab2","In Progress"),
tabPanel("Tab3","In Progress")
)
)
server <- function(input, output) {
output$distPlot <- renderPlot({
if(input$SelectPlot =="Jitter"){
a <- ggplot(iris,aes(x=Sepal.Length,y=Sepal.Width)) + geom_jitter(shape=input$Shape)
}
if(input$SelectPlot =="Scatter"){
a <- ggplot(iris,aes(x=Sepal.Length,y=Sepal.Width)) + geom_point(shape=input$Shape)
}
if(input$SelectPlot =="Line"){
a <- ggplot(iris,aes(x=Sepal.Length,y=Sepal.Width)) + geom_line(col=input$Shape)
}
a
})#output$dist
}#Server
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
ui <- fluidPage(theme = shinytheme("cerulean"),
navbarPage(
"Shinny Page",
tabPanel("Main Tab",
sidebarPanel("This is the side"),
mainPanel("This is the Main")
),
tabPanel("Tab2","In Progress")
)
)
shinyApp(ui = ui, server = server)
ui <- fluidPage(theme = shinytheme("cerulean"),
navbarPage(
"Shinny Page",
tabPanel("Main Tab",
sidebarPanel(
selectInput(
inputId = "SelectPlot",
label = "TypeofPlot",
choices = c("Scatter","Jitter","Line"),
selected = "Scatter"
),
sliderInput(
inputId="Shape",
label="Shape of Plot",
min=1,
max=20,
step=1,
value=1
),
),
mainPanel(
h1("Output"),
h4("Plot"),
plotOutput("distPlot"),
),
),
tabPanel("Tab2","In Progress"),
tabPanel("Tab3","In Progress")
)
)
shinyApp(ui = ui, server = server)
